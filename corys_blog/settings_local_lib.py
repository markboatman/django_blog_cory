"""
THESE ARE PROJECT SCOPE SETTINGS
Django settings for local_library project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
# changed some things for deployment using this:
# # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field


import dj_database_url
from pathlib import Path
import os
# from dotenv import parse_dotenv, read_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# both of these prints work
# print('base_dir is: ', BASE_DIR)
# print('base_dir is %s' % BASE_DIR)
# if TEST_VAR is defined set to defined value else ''
TEST_VAR = os.environ.get('TEST_VAR', '')
print('TEST_VAR is %s' % TEST_VAR)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
# old SECRET_KEY = 'django-insecure-**u-1qet!wedu2z*osv6b!@ay1q(4m+wdbm9g)qsy$0a^u118s'
# generated this here: https://miniwebtool.com/django-secret-key-generator/
# prod key on heroku prod_key_mf_b4x3!izvfm*1oys+uj*@ycr1qth=vr$bcliz_xw%1k8jtq4
# start up script, runserver, sets need env vars
# on heroku these a defined as app variables
SECRET_KEY = os.environ.get(
    # if not set in environment set to dev_key_
    'DJANGO_SECRET_KEY', 'dev_key_$ko1ridow#(0706$lk-luqgo(pq_$3)++q-gpad5o$c#q2)qlv'
    )
# print('SECRET_KEY IS: %s' % SECRET_KEY)
# if DJANGO_DEBUG not defined in os.environ, DEBUG will be True
# Have to explicitly set DJANGO_DEBUG to False in .env/runserver
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'
print('DEBUG is set to?: %s' % DEBUG)

# need to have this set now, since I started mucking around
ALLOWED_HOSTS = ['localhost', '127.0.0.1',
                 'django-local-library-mb.herokuapp.com']

# 'python manage.py check --deploy' recmmendation
# Note setting these may cause problems in dev
# Note these are bools not strings
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
# don't set this var in dev, dev server is an http server. Not https
# might need to set this in runserver start up script
# SECURE_SSL_REDIRECT = True
# end check --deploy recmmendation


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Add our new application
    # This object was created for us in /catalog/apps.py
    'catalog.apps.CatalogConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # for static files, in prod
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'local_library.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'local_library.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DB_USER = os.environ.get('DB_USER', '')
DB_PASSWORD = os.environ.get('DB_PASSWORD', '')
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        # 'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': 'localhost_local_library',
        # 'USER': DB_USER,
        # 'PASSWORD': DB_PASSWORD,
        # 'HOST': '127.0.0.1',
        # 'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# this is the original: STATIC_URL = 'static/'
# from medium https://medium.com/quick-code/deploying-django-app-to-heroku-full-guide-6ff7252578d7
# same as MDN
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
# can optionally do this MDN docs
# Simplified static file serving.
# https://pypi.org/project/whitenoise/
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# not used mdn deploy docs, used in medium docs
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/'

# Email is not setup by default, this sends the email to the server
# console. You can copy the link from the console to get to the change
# password form (this is for the local_library app)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# postgres setup from mdn docs
# Django will now use the database configuration in DATABASE_URL if
# the environment variable is set; otherwise it uses the default
# SQLite database. The value conn_max_age=500 makes the connection persistent,
# which is far more efficient than recreating the connection on every request
# cycle (this is optional and can be removed if needed).
# Update database configuration from $DATABASE_URL.
# THIS IS NOT WORKING
db_from_env = dj_database_url.config(conn_max_age=500)
# print('db_from_env: %s' % db_from_env)
DATABASES['default'].update(db_from_env)
