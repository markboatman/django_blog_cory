"""
Django settings for corys_blog project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
# have to install dj-database-url
import dj_database_url
from pathlib import Path, os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# generated secure key here: https://miniwebtool.com/django-secret-key-generator/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
  # if DJANGO_SECRET_KEY is not set in the environment, use insecure
  'DJANGO_SECRET_KEY', 'django-insecure-as)9c$x6odm+y7vm%up6j$2$uz-((&#$gj5s&2_*h)t#=*bufc'
)

# if DJANGO_DEBUG not defined in os.environ, DEBUG will be True
# Have to explicitly set DJANGO_DEBUG to False in .env/runserver
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'
print('DEBUG is set to?: %s' % DEBUG)

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'django-blog-mb.herokuapp.com']

# These are 'python manage.py check --deploy' recmmendation
# Note - setting these may cause problems in dev
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Application definition
INSTALLED_APPS = [
    # this is our blog app
    'blog.apps.BlogConfig',
    # this is our user app, 
    # UserConfig class is in users/apps.py
    'users.apps.UsersConfig',
    # 3rd party apps
    # to access our installed django-crispy-forms
    'crispy_forms', # define this in this file, CRISPY_TEMPLATE_PACK = 'bootstrap4'
    # for AWS bucket access
    'storages',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'corys_blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'corys_blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        # 'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': 'corys_blog',
        # 'USER': 'mark',
        #  The is the postgres pass for user 'mark'
        # 'PASSWORD': '*WoYaoLai*',
        # 'HOST': '127.0.0.1',
        # 'PORT': '5432',
    }
}
# postgres setup from mdn docs
# Django will now use the database configuration in DATABASE_URL if
# the environment variable is set; otherwise it uses the default
# SQLite database. The value conn_max_age=500 makes the connection persistent,
# which is far more efficient than recreating the connection on every request
# cycle (this is optional and can be removed if needed).
# Update database configuration from $DATABASE_URL if defined in env
# db_from_env = dj_database_url.config(conn_max_age=500)
# print('db_from_env: %s' % db_from_env)
# DATABASES['default'].update(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = 'static/'
# add this for heroku, heroku will put static files here
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = 'media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# for our installed django-crispy-forms library
CRISPY_TEMPLATE_PACK = 'bootstrap4'
# to override django default for LoginView class based view
LOGIN_REDIRECT_URL='blog-home'
# override django default user not logged in redirect
LOGIN_URL = 'login'
# configure django to use my gmail account to send mail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST ='smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
# Cory does not set this EMAIL_USE_SSL = False
EMAIL_HOST_USER = os.environ.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS')
# AWS stuff, from here https://django-storages.readthedocs.io/en/latest/
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
# don't allow users to overwrite files in the bucket that have the same name
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

